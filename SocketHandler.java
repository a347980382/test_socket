package com.*;import lombok.extern.slf4j.Slf4j;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.net.Socket;import java.util.UUID;/** * Socket操作处理类 */@Slf4jpublic class SocketHandler {    /**     * 将连接的Socket注册到Socket池中     * @param socket     * @return     */    public static SocketClient register(Socket socket) {        SocketClient client = new SocketClient();        client.setSocket(socket);        try {            client.setInputStream(new DataInputStream(socket.getInputStream()));            client.setOutputStream(new DataOutputStream(socket.getOutputStream()));            String uuid = UUID.randomUUID().toString().replace("-", "");            client.setKey(uuid);            SocketPool.add(client);            return client;        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    /**     * 向指定客户端发送信息     * @param client     * @param message     */    public static void sendMessage(SocketClient client, String message){        try {            client.getOutputStream().write(message.getBytes("utf-8"));            client.getOutputStream().flush();            client.setStartTime(System.currentTimeMillis());        } catch (IOException e) {            log.error("发送信息异常：{}", e);            close(client);        }    }    // 读取数据    public static byte[] receiveBytes(SocketClient client) throws IOException {        String strRead = "";        int leng = 0;        while (leng == 0) {            leng = client.getInputStream().available();        }        byte bytRead[] = new byte[leng];        client.getInputStream().read(bytRead, 0, leng);        strRead += new String(bytRead, "utf-8");        strRead = strRead.trim();        System.out.println(strRead);        client.setStartTime(System.currentTimeMillis());        // 心跳检测        if (client.redirct()) {            return null;        }        return strRead.getBytes();    }    /**     * 指定Socket资源回收     * @param clientSocket     */    public static void close(SocketClient clientSocket){        log.info("进行资源回收");        if (clientSocket != null){            log.info("开始回收socket相关资源，其Key为{}", clientSocket.getKey());            SocketPool.remove(clientSocket.getKey());            clientSocket.setStatus(-100);            Socket socket = clientSocket.getSocket();            try {                if (!socket.isClosed()) {                    socket.getInputStream().close();                    socket.getOutputStream().close();                }            } catch (IOException e) {                log.error("关闭输入输出流异常，{}", e);            }finally {                try {                    socket.close();                } catch (IOException e) {                    log.error("关闭socket异常{}", e);                }            }        }    }    /**     * 发送数据包，判断数据连接状态     * @param clientSocket     * @return     */    public static boolean isSocketClosed(SocketClient clientSocket){        try {            clientSocket.getSocket().sendUrgentData(-1);            return false;        } catch (IOException e) {            return true;        }    }}